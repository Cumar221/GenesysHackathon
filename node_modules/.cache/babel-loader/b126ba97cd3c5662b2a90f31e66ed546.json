{"ast":null,"code":"import _classCallCheck from \"/Users/cumaryusuf/Desktop/hackathon/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cumaryusuf/Desktop/hackathon/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cumaryusuf/Desktop/hackathon/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cumaryusuf/Desktop/hackathon/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cumaryusuf/Desktop/hackathon/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/cumaryusuf/Desktop/hackathon/src/Question.js\";\nimport React, { Component } from 'react';\nimport recordRTC from 'recordrtc';\nimport './App.css';\n\nvar Question =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Question, _Component);\n\n  function Question(props) {\n    var _this;\n\n    _classCallCheck(this, Question);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Question).call(this, props));\n\n    _this.video();\n\n    return _this;\n  }\n\n  _createClass(Question, [{\n    key: \"successCallback\",\n    value: function successCallback(stream) {\n      // RecordRTC usage goes here\n      var options = {\n        mimeType: 'video/webm',\n        // or video/webm\\;codecs=h264 or video/webm\\;codecs=vp9\n        audioBitsPerSecond: 128000,\n        videoBitsPerSecond: 128000,\n        bitsPerSecond: 128000 // if this line is provided, skip above two\n\n      };\n      recordRTC = RecordRTC(stream, options);\n      recordRTC.startRecording();\n      this.run();\n    }\n  }, {\n    key: \"errorCallback\",\n    value: function errorCallback(error) {// maybe another application is using the device\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var mediaConstraints = {\n        video: true,\n        audio: true\n      };\n      navigator.mediaDevices.getUserMedia(mediaConstraints).then(this.successCallback).catch(this.errorCallback);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      recordRTC.stopRecording(function (audioVideoWebMURL) {\n        video.src = audioVideoWebMURL;\n        var recordedBlob = recordRTC.getBlob();\n        recordRTC.getDataURL(function (dataURL) {});\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Hello\");\n    }\n  }]);\n\n  return Question;\n}(Component);\n\nexport default Question;","map":{"version":3,"sources":["/Users/cumaryusuf/Desktop/hackathon/src/Question.js"],"names":["React","Component","recordRTC","Question","props","video","stream","options","mimeType","audioBitsPerSecond","videoBitsPerSecond","bitsPerSecond","RecordRTC","startRecording","run","error","mediaConstraints","audio","navigator","mediaDevices","getUserMedia","then","successCallback","catch","errorCallback","stopRecording","audioVideoWebMURL","src","recordedBlob","getBlob","getDataURL","dataURL"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,WAAP;;IAEMC,Q;;;;;AACF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;;AACA,UAAKC,KAAL;;AAFe;AAGlB;;;;oCAEeC,M,EAAQ;AACpB;AAEA,UAAIC,OAAO,GAAG;AACVC,QAAAA,QAAQ,EAAE,YADA;AACc;AACxBC,QAAAA,kBAAkB,EAAE,MAFV;AAGVC,QAAAA,kBAAkB,EAAE,MAHV;AAIVC,QAAAA,aAAa,EAAE,MAJL,CAIY;;AAJZ,OAAd;AAMAT,MAAAA,SAAS,GAAGU,SAAS,CAACN,MAAD,EAASC,OAAT,CAArB;AACAL,MAAAA,SAAS,CAACW,cAAV;AACA,WAAKC,GAAL;AACH;;;kCAEaC,K,EAAO,CACjB;AACH;;;0BAEI;AACD,UAAIC,gBAAgB,GAAG;AAAEX,QAAAA,KAAK,EAAE,IAAT;AAAeY,QAAAA,KAAK,EAAE;AAAtB,OAAvB;AACAC,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCJ,gBAApC,EAAsDK,IAAtD,CAA2D,KAAKC,eAAhE,EAAiFC,KAAjF,CAAuF,KAAKC,aAA5F;AACH;;;2BAEK;AACFtB,MAAAA,SAAS,CAACuB,aAAV,CAAwB,UAAUC,iBAAV,EAA6B;AACjDrB,QAAAA,KAAK,CAACsB,GAAN,GAAYD,iBAAZ;AAEA,YAAIE,YAAY,GAAG1B,SAAS,CAAC2B,OAAV,EAAnB;AACA3B,QAAAA,SAAS,CAAC4B,UAAV,CAAqB,UAASC,OAAT,EAAkB,CAAG,CAA1C;AACH,OALD;AAMH;;;6BAGQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ;AAKH;;;;EA7CkB9B,S;;AAgDvB,eAAeE,QAAf","sourcesContent":["import React, { Component} from 'react';\nimport recordRTC from 'recordrtc';\nimport './App.css';\n\nclass Question extends Component {\n    constructor(props) {\n        super(props);\n        this.video();\n    }\n\n    successCallback(stream) {\n        // RecordRTC usage goes here\n\n        var options = {\n            mimeType: 'video/webm', // or video/webm\\;codecs=h264 or video/webm\\;codecs=vp9\n            audioBitsPerSecond: 128000,\n            videoBitsPerSecond: 128000,\n            bitsPerSecond: 128000 // if this line is provided, skip above two\n        };\n        recordRTC = RecordRTC(stream, options);\n        recordRTC.startRecording();\n        this.run()\n    }\n\n    errorCallback(error) {\n        // maybe another application is using the device\n    }\n\n    run(){\n        var mediaConstraints = { video: true, audio: true };\n        navigator.mediaDevices.getUserMedia(mediaConstraints).then(this.successCallback).catch(this.errorCallback);\n    }\n\n    stop(){\n        recordRTC.stopRecording(function (audioVideoWebMURL) {\n            video.src = audioVideoWebMURL;\n\n            var recordedBlob = recordRTC.getBlob();\n            recordRTC.getDataURL(function(dataURL) { });\n        });\n    }\n\n\n    render() {\n        return (\n            <div>\n                Hello\n            </div>\n        );\n    }\n}\n\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}