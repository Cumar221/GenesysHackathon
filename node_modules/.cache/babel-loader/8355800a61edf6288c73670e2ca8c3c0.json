{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nif (location.protocol !== 'https:' && location.hostname !== 'localhost') {\n  console.warn('getUserMedia() must be run from a secure origin: https or localhost.\\nChanging protocol to https.');\n}\n\nif (!navigator.mediaDevices && !navigator.getUserMedia) {\n  console.warn('Your browser doesn\\'t support navigator.mediaDevices.getUserMedia and navigator.getUserMedia.');\n}\n\nnavigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia; // stop hack\n// from http://stackoverflow.com/questions/11642926/stop-close-webcam-which-is-opened-by-navigator-getusermedia\n\nvar MediaStream = window.MediaStream || window.webkitMediaStream;\n;\n\nif (typeof MediaStream !== 'undefined' && !('stop' in MediaStream.prototype)) {\n  MediaStream.prototype.stop = function () {\n    this.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n    this.getVideoTracks().forEach(function (track) {\n      track.stop();\n    });\n  };\n}\n\nvar ReactMediaRecorder = function (_Component) {\n  _inherits(ReactMediaRecorder, _Component);\n\n  function ReactMediaRecorder(props) {\n    _classCallCheck(this, ReactMediaRecorder);\n\n    var _this = _possibleConstructorReturn(this, (ReactMediaRecorder.__proto__ || Object.getPrototypeOf(ReactMediaRecorder)).call(this, props));\n\n    _this.state = {\n      asked: false,\n      permission: false,\n      available: false,\n      recording: false,\n      paused: false\n    };\n    _this.stream = null;\n    _this.mediaRecorder = null;\n    _this.mediaChunk = [];\n    _this.start = _this.start.bind(_this);\n    _this.stop = _this.stop.bind(_this);\n    _this.pause = _this.pause.bind(_this);\n    _this.resume = _this.resume.bind(_this);\n    _this.initMediaRecorder = _this.initMediaRecorder.bind(_this);\n    return _this;\n  }\n\n  _createClass(ReactMediaRecorder, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var width = this.props.width;\n      var height = this.props.height;\n      var constraints = this.props.constraints;\n\n      var handleSuccess = function handleSuccess(stream) {\n        _this2.stream = stream;\n        _this2.mediaChunk = [];\n\n        _this2.setState({\n          permission: true,\n          asked: true,\n          recording: false\n        });\n\n        _this2.props.onGranted();\n\n        _this2.initMediaRecorder();\n      };\n\n      var handleFailed = function handleFailed(err) {\n        _this2.setState({\n          asked: false\n        });\n\n        _this2.props.onDenied(err);\n      };\n\n      if (navigator.mediaDevices) {\n        navigator.mediaDevices.getUserMedia(constraints).then(handleSuccess).catch(handleFailed);\n      } else if (navigator.getUserMedia) {\n        navigator.getUserMedia(constraints, handleSuccess, handleFailed);\n      } else {\n        var errMessage = 'Browser doesn\\'t support UserMedia API. Please try with another browser.';\n        console.warn(errMessage);\n        this.props.onError(new Error(errMessage));\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.mediaRecorder = null;\n      this.mediaChunk = [];\n      this.stream.stop();\n      this.stream = null;\n    }\n  }, {\n    key: 'initMediaRecorder',\n    value: function initMediaRecorder() {\n      var _this3 = this;\n\n      try {\n        var options = {};\n        var types = ['video/webm;codecs=vp8', 'video/webm', ''];\n        if (this.props.mimeType) types.unshift(this.props.mimeType);\n\n        for (var i = 0; i < types.length; i++) {\n          var type = types[i];\n\n          if (MediaRecorder.isTypeSupported(type)) {\n            options.mimeType = type;\n            break;\n          }\n\n          console.warn(type + ' is not supported on your browser.');\n        }\n\n        var mediaRecorder = new MediaRecorder(this.stream, options);\n\n        mediaRecorder.ondataavailable = function (ev) {\n          if (ev.data && ev.data.size > 0) {\n            _this3.mediaChunk.push(ev.data);\n          }\n        };\n\n        this.mediaRecorder = mediaRecorder;\n        this.setState({\n          available: true\n        });\n      } catch (err) {\n        console.log(err);\n        console.error('Failed to initialize MediaRecorder.', err);\n        this.setState({\n          available: false\n        });\n      }\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      if (!this.state.available) return;\n      this.mediaChunk = [];\n      this.mediaRecorder.start(this.props.timeSlice);\n      this.setState({\n        recording: true\n      });\n      this.props.onStart(this.stream);\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (!this.state.recording) return;\n      this.mediaRecorder.stop();\n      this.setState({\n        paused: true\n      });\n      this.props.onPause();\n    }\n  }, {\n    key: 'resume',\n    value: function resume() {\n      if (!this.state.recording) return;\n      this.initMediaRecorder();\n      this.mediaRecorder.start(this.props.timeSlice);\n      this.setState({\n        paused: false\n      });\n      this.props.onResume(this.stream);\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      if (!this.state.available) return;\n      this.mediaRecorder.stop();\n      this.setState({\n        recording: false\n      });\n      var blob = new Blob(this.mediaChunk, {\n        type: 'video/webm'\n      });\n      this.props.onStop(blob);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var asked = this.state.asked;\n      var permission = this.state.permission;\n      var recording = this.state.recording;\n      var available = this.state.available;\n      return _react2.default.createElement('div', {\n        className: this.props.className\n      }, this.props.render({\n        start: this.start,\n        stop: this.stop,\n        pause: this.pause,\n        resume: this.resume\n      }));\n    }\n  }]);\n\n  return ReactMediaRecorder;\n}(_react.Component);\n\nReactMediaRecorder.propTypes = {\n  constraints: _propTypes2.default.object,\n  className: _propTypes2.default.string,\n  timeSlice: _propTypes2.default.number,\n  mimeType: _propTypes2.default.string,\n  render: _propTypes2.default.func,\n  onGranted: _propTypes2.default.func,\n  onDenied: _propTypes2.default.func,\n  onStart: _propTypes2.default.func,\n  onStop: _propTypes2.default.func,\n  onPause: _propTypes2.default.func,\n  onResume: _propTypes2.default.func,\n  onError: _propTypes2.default.func\n};\nReactMediaRecorder.defaultProps = {\n  constraints: {\n    audio: true,\n    video: true\n  },\n  className: '',\n  timeSlice: 0,\n  mimeType: '',\n  render: function render() {},\n  onGranted: function onGranted() {},\n  onDenied: function onDenied() {},\n  onStart: function onStart() {},\n  onStop: function onStop() {},\n  onPause: function onPause() {},\n  onResume: function onResume() {},\n  onError: function onError() {}\n};\nexports.default = ReactMediaRecorder;","map":null,"metadata":{},"sourceType":"script"}